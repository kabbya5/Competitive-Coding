class Solution {

    /**
     * @param Integer[] $nums
     * @return Boolean
     */
    function primeSubOperation($nums) {
        $kMax = 1000;
        $primes = $this->sieveEratosthenes($kMax);

        $prevNum = 0;
        foreach ($nums as &$num) {
            // Make nums[i] the smallest as possible and still > nums[i - 1].
            $i = $this->binarySearch($primes, $num - $prevNum);
            if ($i > 0 && $primes[$i - 1] < $num) {
                $num -= $primes[$i - 1];
            }
            if ($num <= $prevNum) {
                return false;
            }
            $prevNum = $num;
        }

        return true;
    }

    private function sieveEratosthenes($n) {
        $isPrime = array_fill(0, $n + 1, true);
        $isPrime[0] = $isPrime[1] = false;

        for ($i = 2; $i * $i <= $n; $i++) {
            if ($isPrime[$i]) {
                for ($j = $i * $i; $j <= $n; $j += $i) {
                    $isPrime[$j] = false;
                }
            }
        }

        $primes = [];
        for ($i = 2; $i <= $n; $i++) {
            if ($isPrime[$i]) {
                $primes[] = $i;
            }
        }

        return $primes;
    }

    private function binarySearch($arr, $target) {
        $low = 0;
        $high = count($arr);

        while ($low < $high) {
            $mid = $low + (int)(($high - $low) / 2);
            if ($arr[$mid] >= $target) {
                $high = $mid;
            } else {
                $low = $mid + 1;
            }
        }

        return $low;
    }
}
