class TrieNode {
    public $children;
    public $count;

    public function __construct() {
        $this->children = [];
        $this->count = 0;
    }
}

class Trie {
    private $root;

    public function __construct() {
        $this->root = new TrieNode();
    }

    public function insert($word) {
        $node = $this->root;
        for ($i = 0; $i < strlen($word); $i++) {
            $char = $word[$i];
            if (!isset($node->children[$char])) {
                $node->children[$char] = new TrieNode();
            }
            $node = $node->children[$char];
            $node->count++;
        }
    }

    public function getPrefixScore($word) {
        $node = $this->root;
        $score = 0;
        for ($i = 0; $i < strlen($word); $i++) {
            $char = $word[$i];
            if (isset($node->children[$char])) {
                $node = $node->children[$char];
                $score += $node->count;
            }
        }
        return $score;
    }
}


class Solution {

    /**
     * @param String[] $words
     * @return Integer[]
     */
    function sumPrefixScores($words) {
        $trie = new Trie();

        // Insert all words into the trie
        foreach ($words as $word) {
            $trie->insert($word);
        }

        // Get the sum of prefix scores for each word
        $result = [];
        foreach ($words as $word) {
            $result[] = $trie->getPrefixScore($word);
        }

        return $result;
    }
}
