/**
 * Definition for a singly-linked list.
 * class ListNode {
 *     public $val = 0;
 *     public $next = null;
 *     function __construct($val = 0, $next = null) {
 *         $this->val = $val;
 *         $this->next = $next;
 *     }
 * }
 */
class Solution {

    /**
     * @param ListNode $list1
     * @param ListNode $list2
     * @return ListNode
     */
    function mergeTwoLists($list1, $list2) {
        $newHead = new listNode(-1);
        $head = $newHead;
        $p1 = $list1;
        $p2 = $list2;

        while($p1 != null && $p2 != null){
            if($p1->val < $p2->val){
                $head->next = $p1;
                $head = $head->next;
                $p1 = $p1->next;
            }else{
                $head->next = $p2;
                $head = $head->next;
                $p2 = $p2->next;

            }
        }
        if($p1 == null) $head->next = $p2;
        if($p2 == null) $head->next = $p1;

        return $newHead->next;
    }
}
